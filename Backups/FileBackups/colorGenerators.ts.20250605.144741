import { COLOR_PALETTES } from './constants'

// 🌈 GENERATORI DI COLORI - Sistema di colorazione dinamica

// 🔵 COLORI BLU (Hero Section)
export function generateBlueColors(colors: Float32Array, count: number) {
  const palette = COLOR_PALETTES.hero
  for (let i = 0; i < count; i++) {
    colors[i * 3] = palette.r[0] + Math.random() * (palette.r[1] - palette.r[0])     // R
    colors[i * 3 + 1] = palette.g[0] + Math.random() * (palette.g[1] - palette.g[0]) // G
    colors[i * 3 + 2] = palette.b[0] + Math.random() * (palette.b[1] - palette.b[0]) // B
  }
}

// 🟣 COLORI VIOLA (Features Section)
export function generatePurpleColors(colors: Float32Array, count: number) {
  const palette = COLOR_PALETTES.features
  for (let i = 0; i < count; i++) {
    colors[i * 3] = palette.r[0] + Math.random() * (palette.r[1] - palette.r[0])     // R
    colors[i * 3 + 1] = palette.g[0] + Math.random() * (palette.g[1] - palette.g[0]) // G
    colors[i * 3 + 2] = palette.b[0] + Math.random() * (palette.b[1] - palette.b[0]) // B
  }
}

// 🔷 COLORI CYAN (Packages Section)
export function generateCyanColors(colors: Float32Array, count: number) {
  const palette = COLOR_PALETTES.packages
  for (let i = 0; i < count; i++) {
    colors[i * 3] = palette.r[0] + Math.random() * (palette.r[1] - palette.r[0])     // R
    colors[i * 3 + 1] = palette.g[0] + Math.random() * (palette.g[1] - palette.g[0]) // G
    colors[i * 3 + 2] = palette.b[0] + Math.random() * (palette.b[1] - palette.b[0]) // B
  }
}

// 🟢 COLORI VERDI (Success/General)
export function generateGreenColors(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    colors[i * 3] = 0.1 + Math.random() * 0.3     // R
    colors[i * 3 + 1] = 0.7 + Math.random() * 0.3 // G
    colors[i * 3 + 2] = 0.2 + Math.random() * 0.3 // B
  }
}

// 🧬 COLORI DNA (Demo Section) - Verde-blu bio-tech
export function generateDNAColors(colors: Float32Array, count: number) {
  const { helix1, helix2 } = COLOR_PALETTES.demo
  
  for (let i = 0; i < count; i++) {
    // Alterna tra due colori per le due eliche
    const isFirstHelix = i % 2 === 0
    
    if (isFirstHelix) {
      // Prima elica: Verde bio
      colors[i * 3] = helix1.r[0] + Math.random() * (helix1.r[1] - helix1.r[0])     // R
      colors[i * 3 + 1] = helix1.g[0] + Math.random() * (helix1.g[1] - helix1.g[0]) // G
      colors[i * 3 + 2] = helix1.b[0] + Math.random() * (helix1.b[1] - helix1.b[0]) // B
    } else {
      // Seconda elica: Blu tech
      colors[i * 3] = helix2.r[0] + Math.random() * (helix2.r[1] - helix2.r[0])     // R
      colors[i * 3 + 1] = helix2.g[0] + Math.random() * (helix2.g[1] - helix2.g[0]) // G
      colors[i * 3 + 2] = helix2.b[0] + Math.random() * (helix2.b[1] - helix2.b[0]) // B
    }
  }
}

// 🟠 COLORI ARANCIONI (Warning/Demo)
export function generateOrangeColors(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    colors[i * 3] = 0.9 + Math.random() * 0.1     // R
    colors[i * 3 + 1] = 0.5 + Math.random() * 0.3 // G
    colors[i * 3 + 2] = 0.1 + Math.random() * 0.2 // B
  }
}

// 🌈 COLORI ARCOBALENO (Pricing Section - Figura Morfante)
export function generateRainbowColors(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    const hue = (i / count) * 6.28
    const saturation = 0.8 + Math.random() * 0.2
    const value = 0.9 + Math.random() * 0.1
    
    const h = (hue * 180 / Math.PI) / 60
    const c = value * saturation
    const x = c * (1 - Math.abs((h % 2) - 1))
    const m = value - c
    
    let r = 0, g = 0, b = 0
    
    if (h >= 0 && h < 1) { r = c; g = x; b = 0 }
    else if (h >= 1 && h < 2) { r = x; g = c; b = 0 }
    else if (h >= 2 && h < 3) { r = 0; g = c; b = x }
    else if (h >= 3 && h < 4) { r = 0; g = x; b = c }
    else if (h >= 4 && h < 5) { r = x; g = 0; b = c }
    else if (h >= 5 && h < 6) { r = c; g = 0; b = x }
    
    colors[i * 3] = r + m      // R
    colors[i * 3 + 1] = g + m  // G  
    colors[i * 3 + 2] = b + m  // B
  }
}

// 🎯 GENERATORE UNIVERSALE DI COLORI
export function generateColorsForShape(shape: string, colors: Float32Array, count: number) {
  switch(shape) {
    case 'hero':
      generateBlueColors(colors, count)
      break
    case 'features':
      generatePurpleColors(colors, count)
      break
    case 'packages':
      generateCyanColors(colors, count)
      break
    case 'pricing':
      generateRainbowColors(colors, count)
      break
    case 'demo':
      generateDNAColors(colors, count)
      break
    default:
      generateBlueColors(colors, count)
  }
}


// 📱 VERSIONI MOBILE - COLORI PIÙ CONTRASTATI E BRILLANTI

// 🔵 COLORI BLU MOBILE (Hero Section) - Più brillanti per contrasto
export function generateBlueColorsMobile(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    colors[i * 3] = 0.3 + Math.random() * 0.4     // R - Più saturato
    colors[i * 3 + 1] = 0.6 + Math.random() * 0.4 // G - Più brillante
    colors[i * 3 + 2] = 0.9 + Math.random() * 0.1 // B - Blu intenso
  }
}

// 🟣 COLORI VIOLA MOBILE (Features Section) - Contrasto elevato
export function generatePurpleColorsMobile(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    colors[i * 3] = 0.7 + Math.random() * 0.3     // R - Rosso intenso
    colors[i * 3 + 1] = 0.2 + Math.random() * 0.3 // G - Verde ridotto
    colors[i * 3 + 2] = 0.9 + Math.random() * 0.1 // B - Blu massimo
  }
}

// 🔷 COLORI CYAN MOBILE (Packages Section) - Luminosità aumentata
export function generateCyanColorsMobile(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    colors[i * 3] = 0.1 + Math.random() * 0.2     // R - Rosso minimo
    colors[i * 3 + 1] = 0.8 + Math.random() * 0.2 // G - Verde brillante
    colors[i * 3 + 2] = 0.9 + Math.random() * 0.1 // B - Blu massimo
  }
}

// 🧬 COLORI DNA MOBILE (Demo Section) - Bio-tech contrastato
export function generateDNAColorsMobile(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    const isFirstHelix = i % 2 === 0
    
    if (isFirstHelix) {
      // Prima elica: Verde bio brillante
      colors[i * 3] = 0.1 + Math.random() * 0.2     // R - Rosso minimo
      colors[i * 3 + 1] = 0.8 + Math.random() * 0.2 // G - Verde intenso
      colors[i * 3 + 2] = 0.4 + Math.random() * 0.3 // B - Blu moderato
    } else {
      // Seconda elica: Blu tech brillante
      colors[i * 3] = 0.1 + Math.random() * 0.2     // R - Rosso minimo
      colors[i * 3 + 1] = 0.5 + Math.random() * 0.3 // G - Verde moderato
      colors[i * 3 + 2] = 0.9 + Math.random() * 0.1 // B - Blu massimo
    }
  }
}

// 🌈 COLORI ARCOBALENO MOBILE (Pricing Section) - Saturazione massima
export function generateRainbowColorsMobile(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    const hue = (i / count) * 6.28
    const saturation = 1.0 // Saturazione massima per mobile
    const value = 1.0      // Luminosità massima per mobile
    
    const h = (hue * 180 / Math.PI) / 60
    const c = value * saturation
    const x = c * (1 - Math.abs((h % 2) - 1))
    const m = value - c
    
    let r = 0, g = 0, b = 0
    
    if (h >= 0 && h < 1) { r = c; g = x; b = 0 }
    else if (h >= 1 && h < 2) { r = x; g = c; b = 0 }
    else if (h >= 2 && h < 3) { r = 0; g = c; b = x }
    else if (h >= 3 && h < 4) { r = 0; g = x; b = c }
    else if (h >= 4 && h < 5) { r = x; g = 0; b = c }
    else if (h >= 5 && h < 6) { r = c; g = 0; b = x }
    
    colors[i * 3] = r + m      // R
    colors[i * 3 + 1] = g + m  // G  
    colors[i * 3 + 2] = b + m  // B
  }
}

// 🎯 GENERATORE UNIVERSALE CON SUPPORTO MOBILE
export function generateColorsForShapeWithMobile(shape: string, colors: Float32Array, count: number) {
  // Import necessario per isMobileDevice
  const { isMobileDevice } = require('./utils')
  const isMobile = isMobileDevice()
  
  if (isMobile) {
    // 📱 MOBILE: Palette contrastate
    switch(shape) {
      case 'hero':
        generateBlueColorsMobile(colors, count)
        break
      case 'features':
        generatePurpleColorsMobile(colors, count)
        break
      case 'packages':
        generateCyanColorsMobile(colors, count)
        break
      case 'pricing':
        generateRainbowColorsMobile(colors, count)
        break
      case 'demo':
        generateDNAColorsMobile(colors, count)
        break
      default:
        generateBlueColorsMobile(colors, count)
    }
  } else {
    // 🖥️ DESKTOP: Funzione esistente invariata
    generateColorsForShape(shape, colors, count)
  }
}