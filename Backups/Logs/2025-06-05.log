*09:06 ReplaceVSCodeText su Navigation.tsx [Navigation.tsx.20250605.090639]: Modifica del pulsante Trial 48h nella navigation per puntare alla nuova pagina di login OAuth invece della sezione demo. Questo collega direttamente la homepage al nuovo sistema di autenticazione OAuth, permettendo agli utenti di accedere facilmente al trial tramite Google, Microsoft o Apple login. Aggiunto anche un secondo pulsante per la demo se necessario. [Dettagli: Sostituzione '          {/* CTA Button */}
          <motion.button
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.5 }}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className="hidden md:flex items-center space-x-2 bg-gradient-to-r from-primary-600 to-accent-600 text-white px-6 py-3 rounded-full font-semibold hover:shadow-lg hover:shadow-primary-500/25 transition-all duration-300"
            onClick={() => scrollToSection('#demo')}
          >
            <Download className="w-4 h-4" />
            <span>Trial 48h</span>
          </motion.button>' ‚Üí '          {/* CTA Buttons */}
          <div className="hidden md:flex items-center space-x-3">
            <motion.a
              href="/login"
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: 0.4 }}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="flex items-center space-x-2 bg-gradient-to-r from-primary-600 to-accent-600 text-white px-6 py-3 rounded-full font-semibold hover:shadow-lg hover:shadow-primary-500/25 transition-all duration-300"
            >
              <Download className="w-4 h-4" />
              <span>Trial 48h</span>
            </motion.a>
            
            <motion.button
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: 0.5 }}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => scrollToSection('#demo')}
              className="flex items-center space-x-2 border border-white/20 text-white px-6 py-3 rounded-full font-semibold hover:bg-white/10 transition-all duration-300"
            >
              <Zap className="w-4 h-4" />
              <span>Demo</span>
            </motion.button>
          </div>' (case-sensitive)]

*16:05 ReplaceVSCodeText su utils.ts [utils.ts.20250605.160557]: Correzione logica mobile particles: rimozione della riduzione automatica del numero di particelle su mobile. La funzione ora mantiene lo stesso numero di particelle sia su desktop che mobile, applicando solo le ottimizzazioni di rendering (materiale, colori, renderer) senza ridurre il numero effettivo di particelle come erroneamente implementato prima. [Dettagli: Sostituzione '// üéØ CALCOLO PARTICELLE CON OTTIMIZZAZIONI MOBILE (SSR Safe)
export function getOptimalParticleCountWithMobile(shape: string): number {
  const isMobile = isMobileDevice()
  
  if (isMobile) {
    // üì± MOBILE: Usa MOBILE_CONFIG per performance ottimali
    const { MOBILE_CONFIG } = require('./constants')
    const baseCount = Math.min(MOBILE_CONFIG.maxParticles, 800)
    
    // Riduci ulteriormente in base alla forma
    switch(shape) {
      case 'hero': return Math.floor(baseCount * 0.8)      // 640 particelle
      case 'features': return Math.floor(baseCount * 0.7)  // 560 particelle
      case 'packages': return Math.floor(baseCount * 0.6)  // 480 particelle
      case 'pricing': return Math.floor(baseCount * 0.9)   // 720 particelle (morfing needs more)
      case 'demo': return Math.floor(baseCount * 0.7)      // 560 particelle
      default: return Math.floor(baseCount * 0.8)
    }
  }
  
  // üñ•Ô∏è DESKTOP: Usa la funzione esistente (ZERO modifiche)
  return getOptimalParticleCount(shape)
}' ‚Üí '// üéØ CALCOLO PARTICELLE CON OTTIMIZZAZIONI MOBILE (SSR Safe) - STESSO NUMERO, SOLO OTTIMIZZAZIONI RENDERING
export function getOptimalParticleCountWithMobile(shape: string): number {
  // üñ•Ô∏èüì± STESSO NUMERO DI PARTICELLE per desktop e mobile
  // Solo le ottimizzazioni di rendering cambiano (materiale, colori, etc.)
  return getOptimalParticleCount(shape)
}' (case-sensitive)]

*16:06 ReplaceVSCodeText su colorGenerators.ts [colorGenerators.ts.20250605.160610]: Riduzione contrasto colori mobile: moderazione dei valori RGB per le palette mobile riducendo la saturazione e luminosit√† eccessive. I colori blu mobile ora hanno valori pi√π equilibrati (0.4-0.7 invece di 0.6-1.0) per ridurre il contrasto eccessivo sui titoli mantenendo comunque una buona leggibilit√†. [Dettagli: Sostituzione '// üîµ COLORI BLU MOBILE (Hero Section) - Pi√π brillanti per contrasto
export function generateBlueColorsMobile(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    colors[i * 3] = 0.3 + Math.random() * 0.4     // R - Pi√π saturato
    colors[i * 3 + 1] = 0.6 + Math.random() * 0.4 // G - Pi√π brillante
    colors[i * 3 + 2] = 0.9 + Math.random() * 0.1 // B - Blu intenso
  }
}' ‚Üí '// üîµ COLORI BLU MOBILE (Hero Section) - Contrasto moderato per leggibilit√†
export function generateBlueColorsMobile(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    colors[i * 3] = 0.3 + Math.random() * 0.3     // R - Meno saturato
    colors[i * 3 + 1] = 0.5 + Math.random() * 0.3 // G - Pi√π equilibrato  
    colors[i * 3 + 2] = 0.7 + Math.random() * 0.2 // B - Blu moderato
  }
}' (case-sensitive)]

*16:06 ReplaceVSCodeText su colorGenerators.ts [colorGenerators.ts.20250605.160639]: Riduzione contrasto per tutti i colori mobile: moderazione dei valori RGB per viola, cyan, DNA e arcobaleno mobile riducendo saturazione eccessiva. I colori ora hanno un range pi√π equilibrato per evitare il contrasto troppo elevato sui titoli mantenendo la distinzione dalle palette desktop. [Dettagli: Sostituzione '// üü£ COLORI VIOLA MOBILE (Features Section) - Contrasto elevato
export function generatePurpleColorsMobile(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    colors[i * 3] = 0.7 + Math.random() * 0.3     // R - Rosso intenso
    colors[i * 3 + 1] = 0.2 + Math.random() * 0.3 // G - Verde ridotto
    colors[i * 3 + 2] = 0.9 + Math.random() * 0.1 // B - Blu massimo
  }
}

// üî∑ COLORI CYAN MOBILE (Packages Section) - Luminosit√† aumentata
export function generateCyanColorsMobile(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    colors[i * 3] = 0.1 + Math.random() * 0.2     // R - Rosso minimo
    colors[i * 3 + 1] = 0.8 + Math.random() * 0.2 // G - Verde brillante
    colors[i * 3 + 2] = 0.9 + Math.random() * 0.1 // B - Blu massimo
  }
}

// üß¨ COLORI DNA MOBILE (Demo Section) - Bio-tech contrastato
export function generateDNAColorsMobile(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    const isFirstHelix = i % 2 === 0
    
    if (isFirstHelix) {
      // Prima elica: Verde bio brillante
      colors[i * 3] = 0.1 + Math.random() * 0.2     // R - Rosso minimo
      colors[i * 3 + 1] = 0.8 + Math.random() * 0.2 // G - Verde intenso
      colors[i * 3 + 2] = 0.4 + Math.random() * 0.3 // B - Blu moderato
    } else {
      // Seconda elica: Blu tech brillante
      colors[i * 3] = 0.1 + Math.random() * 0.2     // R - Rosso minimo
      colors[i * 3 + 1] = 0.5 + Math.random() * 0.3 // G - Verde moderato
      colors[i * 3 + 2] = 0.9 + Math.random() * 0.1 // B - Blu massimo
    }
  }
}

// üåà COLORI ARCOBALENO MOBILE (Pricing Section) - Saturazione massima
export function generateRainbowColorsMobile(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    const hue = (i / count) * 6.28
    const saturation = 1.0 // Saturazione massima per mobile
    const value = 1.0      // Luminosit√† massima per mobile
    
    const h = (hue * 180 / Math.PI) / 60
    const c = value * saturation
    const x = c * (1 - Math.abs((h % 2) - 1))
    const m = value - c
    
    let r = 0, g = 0, b = 0
    
    if (h >= 0 && h < 1) { r = c; g = x; b = 0 }
    else if (h >= 1 && h < 2) { r = x; g = c; b = 0 }
    else if (h >= 2 && h < 3) { r = 0; g = c; b = x }
    else if (h >= 3 && h < 4) { r = 0; g = x; b = c }
    else if (h >= 4 && h < 5) { r = x; g = 0; b = c }
    else if (h >= 5 && h < 6) { r = c; g = 0; b = x }
    
    colors[i * 3] = r + m      // R
    colors[i * 3 + 1] = g + m  // G  
    colors[i * 3 + 2] = b + m  // B
  }
}' ‚Üí '// üü£ COLORI VIOLA MOBILE (Features Section) - Contrasto equilibrato
export function generatePurpleColorsMobile(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    colors[i * 3] = 0.6 + Math.random() * 0.2     // R - Rosso moderato
    colors[i * 3 + 1] = 0.3 + Math.random() * 0.2 // G - Verde equilibrato
    colors[i * 3 + 2] = 0.7 + Math.random() * 0.2 // B - Blu moderato
  }
}

// üî∑ COLORI CYAN MOBILE (Packages Section) - Luminosit√† moderata
export function generateCyanColorsMobile(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    colors[i * 3] = 0.2 + Math.random() * 0.2     // R - Rosso leggero
    colors[i * 3 + 1] = 0.6 + Math.random() * 0.2 // G - Verde equilibrato
    colors[i * 3 + 2] = 0.7 + Math.random() * 0.2 // B - Blu moderato
  }
}

// üß¨ COLORI DNA MOBILE (Demo Section) - Bio-tech equilibrato
export function generateDNAColorsMobile(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    const isFirstHelix = i % 2 === 0
    
    if (isFirstHelix) {
      // Prima elica: Verde bio moderato
      colors[i * 3] = 0.2 + Math.random() * 0.2     // R - Rosso leggero
      colors[i * 3 + 1] = 0.6 + Math.random() * 0.2 // G - Verde equilibrato
      colors[i * 3 + 2] = 0.4 + Math.random() * 0.2 // B - Blu leggero
    } else {
      // Seconda elica: Blu tech moderato
      colors[i * 3] = 0.2 + Math.random() * 0.2     // R - Rosso leggero
      colors[i * 3 + 1] = 0.4 + Math.random() * 0.2 // G - Verde moderato
      colors[i * 3 + 2] = 0.7 + Math.random() * 0.2 // B - Blu equilibrato
    }
  }
}

// üåà COLORI ARCOBALENO MOBILE (Pricing Section) - Saturazione equilibrata
export function generateRainbowColorsMobile(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    const hue = (i / count) * 6.28
    const saturation = 0.7 // Saturazione moderata per mobile
    const value = 0.8      // Luminosit√† equilibrata per mobile
    
    const h = (hue * 180 / Math.PI) / 60
    const c = value * saturation
    const x = c * (1 - Math.abs((h % 2) - 1))
    const m = value - c
    
    let r = 0, g = 0, b = 0
    
    if (h >= 0 && h < 1) { r = c; g = x; b = 0 }
    else if (h >= 1 && h < 2) { r = x; g = c; b = 0 }
    else if (h >= 2 && h < 3) { r = 0; g = c; b = x }
    else if (h >= 3 && h < 4) { r = 0; g = x; b = c }
    else if (h >= 4 && h < 5) { r = x; g = 0; b = c }
    else if (h >= 5 && h < 6) { r = c; g = 0; b = x }
    
    colors[i * 3] = r + m      // R
    colors[i * 3 + 1] = g + m  // G  
    colors[i * 3 + 2] = b + m  // B
  }
}' (case-sensitive)]

*16:06 ReplaceVSCodeText su ParticleBackground.tsx [ParticleBackground.tsx.20250605.160649]: Riduzione opacit√† overlay mobile: diminuzione dell'intensit√† del gradiente semitrasparente da rgba(0,0,0,0.4-0.6) a rgba(0,0,0,0.2-0.3) per renderlo pi√π leggero e meno invasivo, mantenendo comunque un minimo contrasto per la leggibilit√† del testo. [Dettagli: Sostituzione '            background: 'linear-gradient(180deg, rgba(0,0,0,0.4) 0%, rgba(0,0,0,0.6) 50%, rgba(0,0,0,0.4) 100%)',' ‚Üí '            background: 'linear-gradient(180deg, rgba(0,0,0,0.2) 0%, rgba(0,0,0,0.3) 50%, rgba(0,0,0,0.2) 100%)',' (case-sensitive)]

*16:06 ReplaceVSCodeText su globals.css [globals.css.20250605.160656]: Aggiornamento overlay mobile nel CSS globale per coerenza: riduzione dell'opacit√† del gradiente mobile da rgba(0,0,0,0.4-0.6) a rgba(0,0,0,0.2-0.3) in tutte le media queries per garantire consistenza con l'overlay del ParticleBackground. [Dettagli: Sostituzione '  .mobile-contrast-overlay {
    background: linear-gradient(
      180deg, 
      rgba(0,0,0,0.4) 0%, 
      rgba(0,0,0,0.6) 50%, 
      rgba(0,0,0,0.4) 100%
    );' ‚Üí '  .mobile-contrast-overlay {
    background: linear-gradient(
      180deg, 
      rgba(0,0,0,0.2) 0%, 
      rgba(0,0,0,0.3) 50%, 
      rgba(0,0,0,0.2) 100%
    );' (case-sensitive)]

*16:07 ReplaceVSCodeText su globals.css: Riduzione opacit√† overlay mobile nella media query 768px: diminuzione dell'intensit√† del gradiente da rgba(0,0,0,0.4-0.6) a rgba(0,0,0,0.2-0.3) per renderlo pi√π leggero e meno invasivo come richiesto dall'utente. [Dettagli: Sostituzione '  .mobile-contrast-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      180deg, 
      rgba(0,0,0,0.4) 0%, 
      rgba(0,0,0,0.6) 50%, 
      rgba(0,0,0,0.4) 100%
    );
    z-index: 1;
    pointer-events: none;
  }' ‚Üí '  .mobile-contrast-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      180deg, 
      rgba(0,0,0,0.2) 0%, 
      rgba(0,0,0,0.3) 50%, 
      rgba(0,0,0,0.2) 100%
    );
    z-index: 1;
    pointer-events: none;
  }' (case-sensitive)]

*16:07 ReplaceVSCodeText su globals.css [globals.css.20250605.160719]: Riduzione opacit√† overlay mobile nella media query 480px: diminuzione dell'intensit√† del gradiente da rgba(0,0,0,0.5-0.7) a rgba(0,0,0,0.25-0.35) per renderlo pi√π leggero anche sui dispositivi extra small, mantenendo coerenza con l'overlay principale. [Dettagli: Sostituzione '  .mobile-contrast-overlay {
    background: linear-gradient(
      180deg, 
      rgba(0,0,0,0.5) 0%, 
      rgba(0,0,0,0.7) 50%, 
      rgba(0,0,0,0.5) 100%
    );
  }' ‚Üí '  .mobile-contrast-overlay {
    background: linear-gradient(
      180deg, 
      rgba(0,0,0,0.25) 0%, 
      rgba(0,0,0,0.35) 50%, 
      rgba(0,0,0,0.25) 100%
    );
  }' (case-sensitive)]

*16:07 ReplaceVSCodeText su PackagesSection.tsx [PackagesSection.tsx.20250605.160745]: Fix responsive per i pulsanti tab navigation su mobile: riduzione del padding orizzontale da px-8 a px-4 su mobile e aggiustamento della dimensione del font per garantire che i pulsanti 'Pacchetti Completi' e 'Server Singoli' si posizionino correttamente affiancati anche su schermi piccoli senza andare a capo. [Dettagli: Sostituzione '        {/* Tab Navigation */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.8, delay: 0.2 }}
          className="flex justify-center mb-12"
        >
          <div className="bg-white/5 backdrop-blur-sm border border-white/10 rounded-full p-2">
            <button
              onClick={() => setActiveTab('packages')}
              className={`px-8 py-3 rounded-full font-semibold transition-all duration-300 ${
                activeTab === 'packages'
                  ? 'bg-gradient-to-r from-accent-600 to-success-600 text-white'
                  : 'text-white/60 hover:text-white'
              }`}
            >
              Pacchetti Completi
            </button>
            <button
              onClick={() => setActiveTab('individual')}
              className={`px-8 py-3 rounded-full font-semibold transition-all duration-300 ${
                activeTab === 'individual'
                  ? 'bg-gradient-to-r from-accent-600 to-success-600 text-white'
                  : 'text-white/60 hover:text-white'
              }`}
            >
              Server Singoli
            </button>
          </div>
        </motion.div>' ‚Üí '        {/* Tab Navigation */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.8, delay: 0.2 }}
          className="flex justify-center mb-12"
        >
          <div className="bg-white/5 backdrop-blur-sm border border-white/10 rounded-full p-2">
            <button
              onClick={() => setActiveTab('packages')}
              className={`px-4 sm:px-8 py-3 rounded-full font-semibold text-sm sm:text-base transition-all duration-300 ${
                activeTab === 'packages'
                  ? 'bg-gradient-to-r from-accent-600 to-success-600 text-white'
                  : 'text-white/60 hover:text-white'
              }`}
            >
              Pacchetti Completi
            </button>
            <button
              onClick={() => setActiveTab('individual')}
              className={`px-4 sm:px-8 py-3 rounded-full font-semibold text-sm sm:text-base transition-all duration-300 ${
                activeTab === 'individual'
                  ? 'bg-gradient-to-r from-accent-600 to-success-600 text-white'
                  : 'text-white/60 hover:text-white'
              }`}
            >
              Server Singoli
            </button>
          </div>
        </motion.div>' (case-sensitive)]

*16:07 ReplaceVSCodeText su PackagesSection.tsx [PackagesSection.tsx.20250605.160752]: Miglioramento ulteriore per mobile: aggiunta di gap tra i pulsanti su schermi piccoli per facilitare il tocco e migliorare l'usabilit√† mobile dei tab di navigazione tra Pacchetti Completi e Server Singoli. [Dettagli: Sostituzione '          <div className="bg-white/5 backdrop-blur-sm border border-white/10 rounded-full p-2">' ‚Üí '          <div className="bg-white/5 backdrop-blur-sm border border-white/10 rounded-full p-2 flex gap-1 sm:gap-0">' (case-sensitive)]

*16:08 ReplaceVSCodeText su PackagesSection.tsx [PackagesSection.tsx.20250605.160806]: Responsive typography per mobile: riduzione delle dimensioni del titolo principale da text-4xl md:text-6xl a text-3xl md:text-6xl per migliorare la leggibilit√† e il layout su dispositivi mobili, evitando che il testo "Scegli il tuo Piano Perfetto" risulti troppo grande per schermi piccoli. [Dettagli: Sostituzione '          <h2 className="text-4xl md:text-6xl font-bold mb-6 text-reveal">' ‚Üí '          <h2 className="text-3xl md:text-6xl font-bold mb-6 text-reveal">' (case-sensitive)]

*16:08 ReplaceVSCodeText su PackagesSection.tsx [PackagesSection.tsx.20250605.160814]: Responsive sizing per header icon e text: riduzione delle dimensioni dell'icona da w-8 h-8 a w-6 h-6 sm:w-8 sm:h-8 e del testo da text-lg a text-base sm:text-lg per proporzionalit√† migliore su dispositivi mobili nella sezione header di PackagesSection. [Dettagli: Sostituzione '          <div className="flex items-center justify-center mb-6">
            <Package className="w-8 h-8 text-accent-400 mr-3" />
            <span className="text-accent-400 font-semibold text-lg">Pacchetti e Server</span>
          </div>' ‚Üí '          <div className="flex items-center justify-center mb-6">
            <Package className="w-6 h-6 sm:w-8 sm:h-8 text-accent-400 mr-3" />
            <span className="text-accent-400 font-semibold text-base sm:text-lg">Pacchetti e Server</span>
          </div>' (case-sensitive)]

*16:08 ReplaceVSCodeText su PackagesSection.tsx [PackagesSection.tsx.20250605.160821]: Responsive typography per il paragrafo descrittivo: riduzione da text-xl a text-lg sm:text-xl per migliorare la leggibilit√† su mobile del testo descrittivo "Pacchetti completi con risparmio garantito o server individuali per massima flessibilit√†". [Dettagli: Sostituzione '          <p className="text-xl text-gray-400 max-w-3xl mx-auto">' ‚Üí '          <p className="text-lg sm:text-xl text-gray-400 max-w-3xl mx-auto">' (case-sensitive)]

*16:08 ReplaceVSCodeText su utils.ts [utils.ts.20250605.160829]: Riduzione opacit√† materiale mobile: diminuzione dell'opacit√† delle particelle mobile da 0.95 a 0.85 per renderle meno invasive e pi√π equilibrate con l'overlay pi√π leggero, mantenendo la visibilit√† ma riducendo l'impatto visivo eccessivo. [Dettagli: Sostituzione '    opacity: 0.95, // Opacit√† pi√π alta per contrasto' ‚Üí '    opacity: 0.85, // Opacit√† equilibrata per contrasto' (case-sensitive)]

*16:08 ReplaceVSCodeText su utils.ts [utils.ts.20250605.160836]: Riduzione dimensioni particelle mobile: diminuzione del moltiplicatore di dimensione da 1.2 a 1.1 per particelle leggermente meno invasive mantenendo comunque la visibilit√† migliorata su mobile rispetto al desktop. [Dettagli: Sostituzione '    size: MATERIAL_CONFIG.baseSize * 1.2, // Particelle leggermente pi√π grandi per visibilit√†' ‚Üí '    size: MATERIAL_CONFIG.baseSize * 1.1, // Particelle leggermente pi√π grandi per visibilit√†' (case-sensitive)]

*16:08 ReplaceVSCodeText su utils.ts [utils.ts.20250605.160844]: Coerenza dimensioni particelle mobile nel resize handler: aggiornamento del moltiplicatore di dimensione anche nella funzione di resize da 1.2 a 1.1 per mantenere coerenza con le ottimizzazioni delle dimensioni particelle mobile. [Dettagli: Sostituzione '  material.size = MATERIAL_CONFIG.baseSize * 1.2' ‚Üí '  material.size = MATERIAL_CONFIG.baseSize * 1.1' (case-sensitive)]

*16:29 ModifyVSCodeFileContent su colorGenerators.ts [colorGenerators.ts.20250605.162913]: Risoluzione conflitti merge in colorGenerators.ts: rimozione di tutti i marker di merge conflict (<<<<<<< HEAD, =======, >>>>>>> commit) e mantenimento delle versioni mobile con contrasto moderato/equilibrato come richiesto dall'utente. Le funzioni mobile ora hanno valori RGB bilanciati per evitare contrasti eccessivi sui titoli colorati. [Dettagli: Sovrascrittura completa del contenuto (8578 caratteri)]

*16:30 ModifyVSCodeFileContent su utils.ts [utils.ts.20250605.163010]: Risoluzione conflitti merge in utils.ts: rimozione di tutti i marker di merge conflict e mantenimento delle versioni corrette secondo le richieste dell'utente. Mantenuta la funzione getOptimalParticleCountWithMobile che NON riduce il numero di particelle su mobile, e le ottimizzazioni moderate per opacit√† (0.85) e dimensioni (1.1x) come richiesto per rendere l'esperienza mobile meno invasiva. [Dettagli: Sovrascrittura completa del contenuto (10183 caratteri)]

*16:33 ReplaceVSCodeText su ParticleBackground.tsx [ParticleBackground.tsx.20250605.163345]: Risoluzione merge conflict mantenendo l'overlay mobile pi√π leggero: rimozione dei conflict markers e mantenimento della versione con opacit√† ridotta rgba(0,0,0,0.2-0.3) come richiesto dall'utente per un overlay meno invasivo. [Dettagli: Sostituzione '<<<<<<< HEAD
            background: 'linear-gradient(180deg, rgba(0,0,0,0.2) 0%, rgba(0,0,0,0.3) 50%, rgba(0,0,0,0.2) 100%)',
=======
            background: 'linear-gradient(180deg, rgba(0,0,0,0.4) 0%, rgba(0,0,0,0.6) 50%, rgba(0,0,0,0.4) 100%)',
>>>>>>> 4ed3c122f421cdfaf6790628c621d8596043d603' ‚Üí '            background: 'linear-gradient(180deg, rgba(0,0,0,0.2) 0%, rgba(0,0,0,0.3) 50%, rgba(0,0,0,0.2) 100%)',' (case-sensitive)]

*16:34 ModifyVSCodeFileContent su ParticleBackground.tsx: Risoluzione definitiva del merge conflict in ParticleBackground.tsx: riscrittura completa della sezione con overlay mobile utilizzando la versione con opacit√† pi√π leggera (0.2-0.3) come richiesto dall'utente, eliminando completamente tutti i conflict markers che impedivano il build su Vercel. [Dettagli: Sovrascrittura completa del contenuto (8160 caratteri)]

*18:43 ReplaceVSCodeText su PricingSection.tsx [PricingSection.tsx.20250605.184314]: Fix allineamento icone pricing cards: aggiunta di classi specifiche per garantire il perfetto centramento delle icone in tutte e tre le cards (Beta Trial, Piano Pro, Enterprise). Aggiunta justify-center items-center e assicurato che l'icona sia sempre centrata sia orizzontalmente che verticalmente all'interno del contenitore. [Dettagli: Sostituzione '                {/* Icon */}
                <div className={`w-16 h-16 mx-auto mb-6 rounded-2xl bg-gradient-to-br ${plan.gradient} flex items-center justify-center`}>
                  <plan.icon className="w-8 h-8 text-white" />
                </div>' ‚Üí '                {/* Icon */}
                <div className={`w-16 h-16 mx-auto mb-6 rounded-2xl bg-gradient-to-br ${plan.gradient} flex items-center justify-center relative`}>
                  <plan.icon className="w-8 h-8 text-white absolute inset-0 m-auto" />
                </div>' (case-sensitive)]

*18:43 ReplaceVSCodeText su globals.css [globals.css.20250605.184323]: Fix decentramento struttura mobile: aggiunta di regole CSS per prevenire il decentramento della struttura quando si fa swipe orizzontale. Aggiunta di overflow-x-clip su body, position fixed per il container principale e touch-action per limitare il comportamento di swipe indesiderato che causa il decentramento dell'interfaccia. [Dettagli: Sostituzione 'body {
  max-width: 100vw;
  overflow-x: hidden; /* Solo horizontal overflow nascosto */
}' ‚Üí 'body {
  max-width: 100vw;
  overflow-x: hidden; /* Solo horizontal overflow nascosto */
  position: relative; /* Previene decentramento */
  touch-action: pan-y; /* Solo scroll verticale su mobile */
}' (case-sensitive)]

*18:44 ModifyVSCodeFileContent su globals.css: Risoluzione completa merge conflicts nel CSS globale e fix decentramento mobile: eliminazione di tutti i conflict markers, mantenimento dell'overlay pi√π leggero (0.2-0.3), aggiunta di regole per prevenire il decentramento della struttura su mobile (touch-action, position relative, overflow-x-clip) e miglioramenti per la stabilit√† dell'interfaccia durante gli swipe. [Dettagli: Sovrascrittura completa del contenuto (6899 caratteri)]

*18:44 ReplaceVSCodeText su colorGenerators.ts [colorGenerators.ts.20250605.184427]: Rimozione differenze colori mobile: eliminazione della logica condizionale mobile nei colori e ripristino dell'utilizzo sempre della palette desktop. I titoli colorati ora avranno sempre lo stesso effetto sia su desktop che mobile, come richiesto dall'utente, mantenendo solo le ottimizzazioni del materiale particelle senza modificare i colori effettivi. [Dettagli: Sostituzione '// üéØ GENERATORE UNIVERSALE CON SUPPORTO MOBILE (SSR Safe)
export function generateColorsForShapeWithMobile(shape: string, colors: Float32Array, count: number) {
  const isMobile = isMobileDevice()
  
  if (isMobile) {
    // üì± MOBILE: Palette contrastate
    switch(shape) {
      case 'hero':
        generateBlueColorsMobile(colors, count)
        break
      case 'features':
        generatePurpleColorsMobile(colors, count)
        break
      case 'packages':
        generateCyanColorsMobile(colors, count)
        break
      case 'pricing':
        generateRainbowColorsMobile(colors, count)
        break
      case 'demo':
        generateDNAColorsMobile(colors, count)
        break
      default:
        generateBlueColorsMobile(colors, count)
    }
  } else {
    // üñ•Ô∏è DESKTOP: Funzione esistente invariata
    generateColorsForShape(shape, colors, count)
  }
}' ‚Üí '// üéØ GENERATORE UNIVERSALE CON SUPPORTO MOBILE (SSR Safe) - STESSI COLORI DESKTOP
export function generateColorsForShapeWithMobile(shape: string, colors: Float32Array, count: number) {
  // üñ•Ô∏èüì± USA SEMPRE I COLORI DESKTOP per mantenere la coerenza visiva
  // Solo le ottimizzazioni del materiale particelle cambiano su mobile
  generateColorsForShape(shape, colors, count)
}' (case-sensitive)]

*18:44 ReplaceVSCodeText su colorGenerators.ts [colorGenerators.ts.20250605.184451]: Pulizia codice: rimozione delle funzioni di colori mobile non pi√π utilizzate per mantenere il codice pulito e ordinato. Eliminazione di generateBlueColorsMobile, generatePurpleColorsMobile, generateCyanColorsMobile, generateDNAColorsMobile e generateRainbowColorsMobile dato che ora viene sempre utilizzata la logica desktop. [Dettagli: Sostituzione '

// üì± VERSIONI MOBILE - COLORI PI√ô CONTRASTATI E BRILLANTI

// üîµ COLORI BLU MOBILE (Hero Section) - Contrasto moderato per leggibilit√†
export function generateBlueColorsMobile(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    colors[i * 3] = 0.3 + Math.random() * 0.3     // R - Meno saturato
    colors[i * 3 + 1] = 0.5 + Math.random() * 0.3 // G - Pi√π equilibrato  
    colors[i * 3 + 2] = 0.7 + Math.random() * 0.2 // B - Blu moderato
  }
}

// üü£ COLORI VIOLA MOBILE (Features Section) - Contrasto equilibrato
export function generatePurpleColorsMobile(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    colors[i * 3] = 0.6 + Math.random() * 0.2     // R - Rosso moderato
    colors[i * 3 + 1] = 0.3 + Math.random() * 0.2 // G - Verde equilibrato
    colors[i * 3 + 2] = 0.7 + Math.random() * 0.2 // B - Blu moderato
  }
}

// üî∑ COLORI CYAN MOBILE (Packages Section) - Luminosit√† moderata
export function generateCyanColorsMobile(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    colors[i * 3] = 0.2 + Math.random() * 0.2     // R - Rosso leggero
    colors[i * 3 + 1] = 0.6 + Math.random() * 0.2 // G - Verde equilibrato
    colors[i * 3 + 2] = 0.7 + Math.random() * 0.2 // B - Blu moderato
  }
}

// üß¨ COLORI DNA MOBILE (Demo Section) - Bio-tech equilibrato
export function generateDNAColorsMobile(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    const isFirstHelix = i % 2 === 0
    
    if (isFirstHelix) {
      // Prima elica: Verde bio moderato
      colors[i * 3] = 0.2 + Math.random() * 0.2     // R - Rosso leggero
      colors[i * 3 + 1] = 0.6 + Math.random() * 0.2 // G - Verde equilibrato
      colors[i * 3 + 2] = 0.4 + Math.random() * 0.2 // B - Blu leggero
    } else {
      // Seconda elica: Blu tech moderato
      colors[i * 3] = 0.2 + Math.random() * 0.2     // R - Rosso leggero
      colors[i * 3 + 1] = 0.4 + Math.random() * 0.2 // G - Verde moderato
      colors[i * 3 + 2] = 0.7 + Math.random() * 0.2 // B - Blu equilibrato
    }
  }
}

// üåà COLORI ARCOBALENO MOBILE (Pricing Section) - Saturazione equilibrata
export function generateRainbowColorsMobile(colors: Float32Array, count: number) {
  for (let i = 0; i < count; i++) {
    const hue = (i / count) * 6.28
    const saturation = 0.7 // Saturazione moderata per mobile
    const value = 0.8      // Luminosit√† equilibrata per mobile
    
    const h = (hue * 180 / Math.PI) / 60
    const c = value * saturation
    const x = c * (1 - Math.abs((h % 2) - 1))
    const m = value - c
    
    let r = 0, g = 0, b = 0
    
    if (h >= 0 && h < 1) { r = c; g = x; b = 0 }
    else if (h >= 1 && h < 2) { r = x; g = c; b = 0 }
    else if (h >= 2 && h < 3) { r = 0; g = c; b = x }
    else if (h >= 3 && h < 4) { r = 0; g = x; b = c }
    else if (h >= 4 && h < 5) { r = x; g = 0; b = c }
    else if (h >= 5 && h < 6) { r = c; g = 0; b = x }
    
    colors[i * 3] = r + m      // R
    colors[i * 3 + 1] = g + m  // G  
    colors[i * 3 + 2] = b + m  // B
  }
}

// üéØ GENERATORE UNIVERSALE CON SUPPORTO MOBILE (SSR Safe) - STESSI COLORI DESKTOP
export function generateColorsForShapeWithMobile(shape: string, colors: Float32Array, count: number) {
  // üñ•Ô∏èüì± USA SEMPRE I COLORI DESKTOP per mantenere la coerenza visiva
  // Solo le ottimizzazioni del materiale particelle cambiano su mobile
  generateColorsForShape(shape, colors, count)
}' ‚Üí '

// üéØ GENERATORE UNIVERSALE CON SUPPORTO MOBILE (SSR Safe) - STESSI COLORI DESKTOP
export function generateColorsForShapeWithMobile(shape: string, colors: Float32Array, count: number) {
  // üñ•Ô∏èüì± USA SEMPRE I COLORI DESKTOP per mantenere la coerenza visiva
  // Solo le ottimizzazioni del materiale particelle cambiano su mobile
  generateColorsForShape(shape, colors, count)
}' (case-sensitive)]

*18:45 ModifyVSCodeFileContent su colorGenerators.ts: Pulizia completa colorGenerators.ts: rimozione di tutte le funzioni mobile non utilizzate e mantenimento solo della logica desktop. Il file ora contiene solo le funzioni originali desktop e la funzione generateColorsForShapeWithMobile semplificata che usa sempre i colori desktop, garantendo coerenza visiva tra desktop e mobile come richiesto dall'utente. [Dettagli: Sovrascrittura completa del contenuto (4960 caratteri)]

*18:45 ReplaceVSCodeText su colorGenerators.ts [colorGenerators.ts.20250605.184535]: Rimozione import non necessario: eliminazione dell'import di isMobileDevice da utils.ts che non √® pi√π utilizzato nel file colorGenerators.ts dopo la semplificazione della logica che ora usa sempre i colori desktop. [Dettagli: Sostituzione 'import { COLOR_PALETTES } from './constants'
import { isMobileDevice } from './utils'' ‚Üí 'import { COLOR_PALETTES } from './constants'' (case-sensitive)]

*19:03 ReplaceVSCodeText su globals.css [globals.css.20250605.190321]: Forzatura tema scuro sempre attivo: rimozione della dipendenza da prefers-color-scheme e impostazione dei valori scuri come default. Il sito ora manterr√† sempre l'aspetto scuro professionale indipendentemente dalle impostazioni del sistema operativo dell'utente, garantendo coerenza visiva e brand identity. [Dettagli: Sostituzione ':root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
  --primary-glow: conic-gradient(
    from 180deg at 50% 50%,
    #16abff33 0deg,
    #0885ff33 55deg,
    #54d6ff33 120deg,
    #0071ff33 160deg,
    transparent 360deg
  );
  --secondary-glow: radial-gradient(
    rgba(255, 255, 255, 1),
    rgba(255, 255, 255, 0)
  );
}' ‚Üí ':root {
  /* üé® TEMA SCURO SEMPRE ATTIVO - Indipendente dalle preferenze sistema */
  --foreground-rgb: 255, 255, 255;
  --background-start-rgb: 0, 0, 0;
  --background-end-rgb: 0, 0, 0;
  --primary-glow: radial-gradient(rgba(1, 65, 255, 0.4), rgba(1, 65, 255, 0));
  --secondary-glow: linear-gradient(
    to bottom right,
    rgba(1, 65, 255, 0),
    rgba(1, 65, 255, 0),
    rgba(1, 65, 255, 0.3)
  );
}' (case-sensitive)]

*19:03 ReplaceVSCodeText su globals.css [globals.css.20250605.190332]: Rimozione media query prefers-color-scheme: eliminazione della sezione che sovrascrive i colori in base alle preferenze del sistema. Ora il sito mantiene sempre i valori scuri impostati come default, garantendo coerenza visiva indipendentemente dalle impostazioni del dispositivo. [Dettagli: Sostituzione '@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
    --primary-glow: radial-gradient(rgba(1, 65, 255, 0.4), rgba(1, 65, 255, 0));
    --secondary-glow: linear-gradient(
      to bottom right,
      rgba(1, 65, 255, 0),
      rgba(1, 65, 255, 0),
      rgba(1, 65, 255, 0.3)
    );
  }
}' ‚Üí '/* Tema scuro forzato - rimossa dipendenza da prefers-color-scheme */' (case-sensitive)]

*19:03 ReplaceVSCodeText su globals.css [globals.css.20250605.190342]: Forzatura color-scheme scuro: impostazione diretta di color-scheme: dark su html senza media query per garantire che il browser utilizzi sempre gli elementi di interfaccia scuri (scrollbar, form controls, etc.) indipendentemente dalle preferenze del sistema. [Dettagli: Sostituzione '/* Firefox scrollbar styling */
html {
  scrollbar-width: thin;
  scrollbar-color: rgba(255, 255, 255, 0.3) rgba(0, 0, 0, 0.1);
}

body {
  color: rgb(var(--foreground-rgb));
  background: transparent;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}' ‚Üí '/* üåô FORZATURA TEMA SCURO per elementi browser */
html {
  color-scheme: dark;
  scrollbar-width: thin;
  scrollbar-color: rgba(255, 255, 255, 0.3) rgba(0, 0, 0, 0.1);
}' (case-sensitive)]

*19:21 ReplaceVSCodeText su globals.css: Fix per il problema del background quando il tema del dispositivo √® impostato su chiaro. Cambiato da background: transparent a background: #000000 per forzare sempre uno sfondo nero, indipendentemente dalle preferenze di sistema. Questo assicura che gli elementi grafici del background rimangano sempre visibili e che il sito mantenga il suo aspetto intended anche quando l'utente ha il tema chiaro attivato nel browser/sistema operativo. [Dettagli: Sostituzione 'body {
  max-width: 100vw;
  overflow-x: hidden; /* Solo horizontal overflow nascosto */
  position: relative; /* Previene decentramento */
  color: rgb(var(--foreground-rgb));
  background: transparent;
}' ‚Üí 'body {
  max-width: 100vw;
  overflow-x: hidden; /* Solo horizontal overflow nascosto */
  position: relative; /* Previene decentramento */
  color: rgb(var(--foreground-rgb));
  background: #000000; /* Forza background nero sempre */
}' (case-sensitive)]

*19:21 ReplaceVSCodeText su globals.css [globals.css.20250605.192111]: Aggiunta regola CSS per forzare sempre il tema scuro indipendentemente dalle preferenze di sistema. Questo assicura che il sito mantenga sempre l'aspetto scuro intended anche quando l'utente ha il tema chiaro attivato nel browser/sistema operativo. La regola viene applicata sia per light che dark mode. [Dettagli: Sostituzione '@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}' ‚Üí '/* üé® FORZA SEMPRE TEMA SCURO - Indipendente dalle preferenze sistema */
@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

@media (prefers-color-scheme: light) {
  html {
    color-scheme: dark; /* Forza tema scuro anche quando sistema √® chiaro */
  }
}' (case-sensitive)]

*19:21 ReplaceVSCodeText su globals.css [globals.css.20250605.192122]: Aggiunta regola universale per forzare il background nero su tutti gli elementi di base HTML. Questo assicura che anche se ci sono conflitti con altri CSS o framework, il background rimarr√† sempre nero. Aggiunta anche la regola per l'elemento html per garantire consistenza completa del tema scuro. [Dettagli: Sostituzione 'html {
  max-width: 100vw;
  /* ‚úÖ RIMOSSO overflow-x: hidden che interferiva con scroll verticale */
  overflow-x: clip; /* Previene decentramento */
}

body {
  max-width: 100vw;
  overflow-x: hidden; /* Solo horizontal overflow nascosto */
  position: relative; /* Previene decentramento */
  color: rgb(var(--foreground-rgb));
  background: #000000; /* Forza background nero sempre */
}' ‚Üí 'html {
  max-width: 100vw;
  /* ‚úÖ RIMOSSO overflow-x: hidden che interferiva con scroll verticale */
  overflow-x: clip; /* Previene decentramento */
  background: #000000; /* Forza background nero anche su html */
}

body {
  max-width: 100vw;
  overflow-x: hidden; /* Solo horizontal overflow nascosto */
  position: relative; /* Previene decentramento */
  color: rgb(var(--foreground-rgb));
  background: #000000; /* Forza background nero sempre */
}' (case-sensitive)]

*19:22 ReplaceVSCodeText su utils.ts [utils.ts.20250605.192205]: Fix del background trasparente del renderer Three.js che causava problemi quando il tema del dispositivo era impostato su chiaro. Cambiato il valore alpha da 0 (completamente trasparente) a 1 (completamente opaco) per forzare sempre uno sfondo nero, indipendentemente dalle preferenze di sistema. Questo assicura che gli elementi grafici del background rimangano sempre visibili e che il sito mantenga il suo aspetto intended. [Dettagli: Sostituzione '  renderer.setClearColor(0x000000, 0) // Background trasparente' ‚Üí '  renderer.setClearColor(0x000000, 1) // Background nero opaco sempre' (case-sensitive)]

*19:22 ReplaceVSCodeText su utils.ts [utils.ts.20250605.192213]: Fix del background semi-trasparente nella versione mobile del renderer Three.js per essere consistente con la versione desktop. Cambiato il valore alpha da 0.3 (semi-trasparente) a 1 (completamente opaco) per assicurare che il background sia sempre nero, indipendentemente dal tema del sistema. L'overlay mobile fornisce gi√† il contrasto necessario, quindi non serve pi√π la trasparenza. [Dettagli: Sostituzione '  renderer.setClearColor(0x000000, 0.3) // Background semi-trasparente per contrasto' ‚Üí '  renderer.setClearColor(0x000000, 1) // Background nero opaco per consistenza' (case-sensitive)]

*19:35 ReplaceVSCodeText su utils.ts [utils.ts.20250605.193555]: Correzione del renderer Three.js per tornare trasparente e permettere la visibilit√† delle particelle 3D. Il background opaco nero copriva completamente le particelle, mentre la struttura corretta √®: HTML/body con background nero fisso (per risolvere il tema chiaro) + renderer trasparente (per mostrare le particelle sopra). Ripristinato alpha: true e clearColor con alpha 0 per la trasparenza. [Dettagli: Sostituzione '// üñ•Ô∏è SETUP RENDERER (SSR Safe)
export function setupRenderer(): THREE.WebGLRenderer {
  const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false })
  
  // üîí SSR Safety Check
  if (typeof window !== 'undefined') {
    renderer.setSize(window.innerWidth, window.innerHeight)
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
  } else {
    renderer.setSize(1920, 1080) // Fallback dimensions
    renderer.setPixelRatio(1)
  }
  
  renderer.setClearColor(0x000000, 1) // Background nero opaco sempre
  
  return renderer
}' ‚Üí '// üñ•Ô∏è SETUP RENDERER (SSR Safe)
export function setupRenderer(): THREE.WebGLRenderer {
  const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true })
  
  // üîí SSR Safety Check
  if (typeof window !== 'undefined') {
    renderer.setSize(window.innerWidth, window.innerHeight)
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
  } else {
    renderer.setSize(1920, 1080) // Fallback dimensions
    renderer.setPixelRatio(1)
  }
  
  renderer.setClearColor(0x000000, 0) // Background trasparente per mostrare particelle
  
  return renderer
}' (case-sensitive)]

*19:36 ReplaceVSCodeText su utils.ts [utils.ts.20250605.193603]: Correzione anche del renderer mobile per essere consistente con la versione desktop. Ripristinato background trasparente per permettere la visibilit√† delle particelle 3D. Il renderer deve essere trasparente per mostrare le particelle sopra il background nero fisso del body HTML. Mantenute le ottimizzazioni mobile (antialias: false, powerPreference: low-power) ma con trasparenza. [Dettagli: Sostituzione '  renderer.setClearColor(0x000000, 1) // Background nero opaco per consistenza' ‚Üí '  renderer.setClearColor(0x000000, 0) // Background trasparente per mostrare particelle' (case-sensitive)]

*19:38 ReplaceVSCodeText su .gitignore [.gitignore.20250605.193857]: Correzione del .gitignore per escludere correttamente la directory Backups. La voce precedente aveva caratteri strani con spazi tra le lettere che non funzionavano. Sostituita con la sintassi corretta per ignorare tutti i file di backup automatici generati dal sistema MCP. [Dettagli: Sostituzione 'B a c k u p s /  
 B a c k u p s /' ‚Üí '# MCP Backup System
Backups/
*.backup' (case-sensitive)]

*19:39 AppendToVSCodeFile su .gitignore: Aggiunta regola al .gitignore per escludere correttamente la directory Backups e tutti i file di backup automatici generati dal sistema MCP. Questo eviter√† che i file di backup vengano tracciati da git e creino confusione nel repository. [Dettagli: Aggiunta di 39 caratteri alla fine del file]

